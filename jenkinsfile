pipeline {
    agent any
    environment {
        BACKEND_IMAGE = "rajb957/cfrs-backend:latest"
        FRONTEND_IMAGE = "rajb957/cfrs-frontend:latest"
        DOCKER_CREDENTIALS = 'cfrsCRED'  // Updated here
    }
    stages {
        
        stage('Initialize Minikube') {
            steps {
                script {
                    sh '''
                    kind delete cluster --name cfrs-cluster
                    kind create cluster \
                --name cfrs-cluster \
                --config - <<EOF
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP
EOF

            # Configure kubectl to use kind cluster
            kind export kubeconfig --name cfrs-cluster
            '''
                }
            }
        }


        stage('Clone Repositories') {
            steps {
                parallel(
                    deploymentRepo: {
                        git url: 'https://github.com/rajb957/cfrs-deployment.git', branch: 'main'
                    },
                    backendRepo: {
                        dir('backend') {
                            git url: 'https://github.com/rajb957/cfrs-backend.git', branch: 'main'
                        }
                    },
                    frontendRepo: {
                        dir('frontend') {
                            git url: 'https://github.com/rajb957/cfrs-frontend.git', branch: 'main'
                        }
                    }
                )
            }
        }
        stage('Deploy Database') {
            steps {
                dir('k8s') {
                    sh 'kubectl apply -f database-deployment.yaml'
                }
            }
        }
        stage('Restore Database') {
            steps {
                dir('ansible') {
                    sh 'ansible-playbook -i inventory.ini restore-database.yml'
                }
            }
        }
        stage('Build and Push Backend Image') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS) {
                        dir('backend') {
                            docker.build(BACKEND_IMAGE).push()
                        }
                    }
                }
            }
        }
        stage('Deploy Backend') {
            steps {
                dir('k8s') {
                    sh 'kubectl apply -f backend-deployment.yaml'
                }
            }
        }
        stage('Describe backend') {
            steps {
                sh '''
                kubectl get svc cfrs-backend
                kubectl get pods
                '''
            }
        }
        stage('Build and Push Frontend Image') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS) {
                        dir('frontend') {
                            docker.build(FRONTEND_IMAGE).push()
                        }
                    }
                }
            }
        }
        stage('Deploy Frontend') {
            steps {
                dir('k8s') {
                    sh 'kubectl apply -f frontend-deployment.yaml'
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
